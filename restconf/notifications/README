Example: Implementing RESTCONF Notification Streams
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This example shows how to implement RESTCONF Notification streams.

Two applications (notifier_builtin_replay_store.c and notifier.c) are
provided which implements either a notification stream with built-in
replay support or with externally implemented replay support.

notifier.c keeps its replay log in memory for simplicity.  A real
external replay store implementation would keep the replay log on disk.

The notifications are specified in notif.yang.

In confd.conf, the stream 'interface' is defined, and the NETCONF
notification capability is enabled.

The curl command line utility is used to subscribe for and view
RESTCONF notifications.  On Ubuntu curl van be installed using the
apt-get install curl command.  Curl can be used to access RESTCONF
notifications over HTTP and HTTPS.

Starting the Example
~~~~~~~~~~~~~~~~~~~~

 1. Build the necessary files and start ConfD using the builtin replay
    store and notifier by typing

        $ make all start-builtin

    notifier_builtin_replay_store.c is now started in the foreground.

    Alternative: To start notifier.c (implementing replay store
    outside of ConfD) do the following instead:

        $ make all start-external

 2. In order to make the notifier program generate some notifications,
    hit 'y', 'u', 'i', or 'd', followed by <enter>.  (see notifier.c
    for details).

 3. To query the stream information, type

        $ make rc-query-json

 4. In the new shell, type

         $ make rc-replay-json

      to replay all logged notifications, and continue with the live feed.

 5. Generate some more notifications as in step 2, and watch them
    arrive as JSON in the new shell from step 4.2.


 6. In a third shell, type

        $ make rc-subscribe-json

    to subscribe to the live feed only.  Repeat step 4.3.

 7. It's also possible to filter events. To only see linkDown events do:

        $ make rc-filter-json

    Now you should only see events generated by the 'd' command, not events
    generated by 'i', 'u' or 'y'.

 8. There are also xml version of the operations listed above, e.g.
    rc-subscribe-xml to get notifications in XML format instead of JSON.

 9. Ctrl-c to terminate the session when the notifications are
    generated.
