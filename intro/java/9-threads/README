Example #9: Using threads in JAVA for a data provider
=====================================================

This example is adapted Example #9 for C, it demonstrates
how you can distribute the callback processing across multiple threads.

In comparison to the C example, the  Data provider class (`com.tailf.dp.Dp`)
implements worker thread pool. The thread management implementation is
not required for this example, as in C. Example shows how JAVA API simplifies
thread management (compare with C variant).

Application receives data on the control socket in the `read()` function of the
`Dp` object. During initialization, an internal thread pool is created inside of
the `Dp` object, according to the parameters passed in the constructor (see
constructor declaration).

During the processing of the callbacks (data callbacks, action callbacks), the
processing is handled by one of the pre-allocated worker threads. In case no
pre-allocated worker thread is available, the new worker thread is created up
to the limit passed in the constructor of `Dp`.

The thread creation can be observed in the logging events of the JAVA
application daemon (logging level can be changed in the `log4j.xml`, element
`priority`, attribute`value`).

The example illustrates how to implement data callback (data provider), action
callback (data model based action command) and transaction callback.
Abort mechanism for action callback is using the `Thread.interrupt()` approach.
This is possible, since the action thread blocks in the `Thread.sleep()`
operation.

Some callback functions (e.g. `init`, functions for transaction callbacks)
are left empty, as they are not required in the JAVA implementation and are
present only to illustrate how to register and implement them.

What the Example does
---------------------

In order to focus on the use of threading, the example only
implements some "dummy" tasks:

1. It provides read-only data supposedly representing the processes
   in the system and the amount of CPU time they have used - but
   this is actually just constant data stored in memory.

2. It implements an action called 'sleep', which does nothing more
   than `Thread.sleep()` for the number of seconds given as its argument,
   reporting the elapsed time from invocation to the end of the
   sleep as the result.

3. It implements an action called `totals`, that uses the `MAAPI` API
   to read the data in item 1, and calculates and reports the number
   of processes and the sum of the CPU time they have used.


The example also shows how to cleanup and reconnect to ConfD in case
the connection is lost, e.g. due to ConfD being restarted.

For Juniper CLI see line that begins with (J). Not available in ConfD Free.
For Cisco XR CLI see line that begins with (C).

Starting the Example
--------------------

 1. Build the necessary files and start ConfD by typing

        $ make all start

 2. Start the CLI with `make cli` (or `make cli-c` for Cisco XR CLI) in a
    different window and try some commands

        (J)> show status dm proc
        (J)> request dm sleep time 3
        (J)> request dm totals

        (C)> show dm proc
        (C)> dm sleep time 3
        (C)> dm totals

    Without threads, the `totals` action invocation would have
    resulted in deadlock.

 3. Start another CLI session with `make cli` in a third window, and
    start a "long-running action" in the original CLI session with
    `request dm sleep time 60`. Run the commands in step 2 in the
    new CLI session. Without threads, the `show` and `sleep` would
    have blocked waiting for the "long-runnnig action" to complete.
    (Not supported in ConfD Free)

 4. Exit one of the CLI sessions and do `make restart`. This
    restarts only the ConfD daemon, and in the original window the
    data provider daemon reports the loss of connection and
    subsequent reconnect. Note: During restart, an ERROR log messages
    are seen in the logging output of the daemon application.


Further Reading
---------------

+ ConfD User Guide: Operational Data
+ ConfD User Guide: Actions
+ Javadoc related to the `Dp` API class
